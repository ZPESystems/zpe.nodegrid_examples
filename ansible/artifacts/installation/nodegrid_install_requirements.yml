- hosts: localhost
  gather_facts: false
  connection: local

  tasks:
    - name: setup ansible user
      block:
        - name: check if ansible user has an existing sshkey
          stat:
            path: "/home/ansible/.ssh/id_ed25519"
          register: key

        - name: create sshkey if none exist
          shell: 'ssh-keygen -t ed25519 -f /home/ansible/.ssh/id_ed25519 -N "" -C ansible@local'
          when: not key.stat.exists

        - name: ensure proper permissions for private sshkey
          file:
            path: "/home/ansible/.ssh/id_ed25519"
            owner: ansible
            group: ansible
            mode: 0600
            backup: 'true'

        - name: ensure proper permissions for public sshkey
          file:
            path: "/home/ansible/.ssh/id_ed25519.pub"
            owner: ansible
            group: ansible
            mode: 0644
            backup: 'true'

        - name: copy public key to tmp
          shell: 'cp --preserve=mode,ownership /home/ansible/.ssh/id_ed25519.pub /tmp/id_ed25519.pub'

        - name: update authorized key file
          authorized_key:
            user: "ansible"
            key: "{{ lookup('file', '/tmp/id_ed25519.pub') }}"

        - name: remove public_key from tmp
          file:
            path: /tmp/id_ed25519.pub
            state: absent
          ignore_errors: true

        - name: add to ansible user to sudoers
          copy:
            src: '/var/local/file_manager/admin_group/zpe.nodegrid_examples/ansible/artifacts/installation/nodegrid_ansible_sudoers.j2'
            dest: '/etc/sudoers.d/ansible'
            owner: root
            group: root
            mode: 0600
      become: true 
      become_user: root

    - name: setup ansible environment
      block:
        - name: create ansible folder on file_manager
          file:
            path: "/var/local/file_manager/admin_group/ansible"
            state: directory
            owner: root
            group: admin
            recurse: 'true'

        - name: check if system_inventories folder exist
          stat:
            path: "/etc/ansible/system_inventories/"
          register: system_inventories
        
        - name: create system_inventories folder and move cluster.py
          copy:
            src: /etc/ansible/inventories/cluster.py
            dest: /etc/ansible/system_inventories/
            owner: ansible
            group: ansible 
            mode: 0755
          when: not system_inventories.stat.exists

        - name: remove cluster.py from inventories
          file:
            path: /etc/ansible/inventories/cluster.py
            state: absent

        - name: create collections, inventories and roles folders
          file:
            path: "/etc/ansible/{{ item }}"
            state: directory
          with_list:
            - "collections"
            - "inventories"
            - "roles"

        - name: install collections
          shell: 'ansible-galaxy collection install -r /var/local/file_manager/admin_group/zpe.nodegrid_examples/ansible/artifacts/collections/requirements.yml -p /etc/ansible/collections'

        - name: install dependencies
          shell: 'sudo -H -u ansible python3 -m pip install ttp --no-index --find-links=/var/local/file_manager/admin_group/zpe.nodegrid_examples/ansible/artifacts/installation/ttp-0.9.1-py2.py3-none-any.whl'
          args:
            warn: false

        - name: create environment variable
          shell: 'if [ -z $TTPCACHEFOLDER ]; then echo "export TTPCACHEFOLDER=\"/tmp\"" >> /home/ansible/.profile; source /home/ansible/.profile; fi'
          args:
            warn: false

        - name: update ansible.cfg
          copy:
            src: /var/local/file_manager/admin_group/zpe.nodegrid_examples/ansible/artifacts/installation/nodegrid_ansible.cfg.j2
            dest: /etc/ansible/ansible.cfg
            owner: ansible
            group: ansible

        - name: create symbolic link in file_manager
          ansible.builtin.file:
            src: "/etc/ansible/{{ item }}"
            dest: "/var/local/file_manager/admin_group/ansible/{{ item }}"
            state: link
          with_list:
            - "inventories"
            - "playbooks"
            - "templates"
            - "roles"

        - name: copy playbooks to /etc/ansible/playbooks
          copy:
            src: "{{ item }}" 
            dest: /etc/ansible/playbooks/
          with_fileglob:
            - /var/local/file_manager/admin_group/zpe.nodegrid_examples/ansible/playbooks/*

        - name: copy hosts.yml to /etc/ansible/inventories
          copy:
            src: /var/local/file_manager/admin_group/zpe.nodegrid_examples/ansible/artifacts/installation/inventory/hosts.yml
            dest: /etc/ansible/inventories/
            owner: ansible
            group: admin
            mode: 0775

        - name: copy devices.py to /etc/ansible/system_inventories
          copy:
            src: /var/local/file_manager/admin_group/zpe.nodegrid_examples/ansible/artifacts/installation/inventory/devices.py
            dest: /etc/ansible/system_inventories/
            owner: ansible
            group: ansible
            mode: 0755
        
        - name: ensure proper permissions to /etc/ansible/
          file:
            path: "/etc/ansible/{{ item }}"
            owner: ansible
            group: admin
            mode: 0775
            backup: 'true'
            recurse: 'true'
          with_list:
            - "inventories"
            - "playbooks"
            - "templates"
            - "collections"
            - "roles"

        - name: check if log ansible exist
          stat:
            path: "/var/log/ansible"
          register: ansible_log

        - name: ensure proper permissions to ansible.log
          file:
            path: "/var/log/ansible"
            owner: ansible
            group: ansible
            mode: 0775
            recurse: 'true'
          when: ansible_log.stat.exists
      become: true
      become_user: root
