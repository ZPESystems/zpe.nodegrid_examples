- hosts: all
  gather_facts: false
  connection: httpapi
  collections:
    - zpe.device_connection
    - zpe.system
    - fortinet.fortios
  vars:
    NETBOX_URL: https://<URL>
    NETBOX_API_TOKEN: <API_TOKEN>
    vdom: "root"
    ansible_httpapi_use_ssl: yes
    ansible_httpapi_validate_certs: no
    ansible_httpapi_port: 443
    new_version: FWF_50E_2R-v6-build1303-FORTINET.out


  tasks:
    - name: Create Backup via OOB
      block:
       - name: Get Backup of OOB Managment interface configuration
         run_command:
            target:  "{{ item.value.label }}"
            username: "{{ console_username }}"
            password: "{{ console_password }}"
            target_os: "{{ ansible_network_os }}"
            cmds:
              - 'show system interface internal'
         delegate_to: "{{ item.value.device.display }}"
         loop: '{{ query("netbox.netbox.nb_lookup",
                      "console-server-ports",
                      api_filter="label=<inventory_hostname>",
                      api_endpoint="https://<URL>",
                      token="<API_TOKEN>",
                      validate_certs=false) }}'
         loop_control:
            label: "{{ item.value.device.display }} - {{ item.value.name }}"
         when: inventory_hostname == item.value.label
         connection: ssh
         register: cmds_output

       - name: Extract config from output
         set_fact:
           cmd_output: "{{ cmds_output.results | selectattr('output','defined') | map(attribute='output') }}"

       - name: Write config to local file as backup
         copy:
            content: "{{ item.stdout }}"
            dest: "~/{{ inventory_hostname }}_interfaces.log"
         with_items: "{{ cmd_output }}"
         loop_control:
            label: "{{item.cmd }}"
         delegate_to: localhost

       - name: Create Backup on Fortinet and store Localy on Nodegrid
         zpe.device_connection.run_command:
                target: "{{ item.value.label }}"
                username: "{{ console_username }}"
                password: "{{ console_password }}"
                target_os: "{{ ansible_network_os }}"
                cmds:
                   - 'execute backup config ftp {{ inventory_hostname }}.cfg 172.16.0.2 ftpuser ftpuser'
         connection: ssh
         delegate_to: "{{ item.value.device.display }}"
         loop: '{{ query("netbox.netbox.nb_lookup",
                      "console-server-ports",
                      api_filter="label=<inventory_hostname>",
                      api_endpoint="https://<URL>",
                      token="<API_TOKEN>",
                      validate_certs=false) }}'
         loop_control:
                label: "{{ item.value.device.display }} - {{ item.value.name }}"
         when: inventory_hostname == item.value.label

       - name: Check file was created
         file:
              dest: "/home/ftpuser/{{ inventory_hostname}}.cfg"
              state: file
         become: True
         check_mode: true
         connection: ssh
         delegate_to: "{{ item.value.device.display }}"
         loop: '{{ query("netbox.netbox.nb_lookup",
                      "console-server-ports",
                      api_filter="label=<inventory_hostname>",
                      api_endpoint="https://<URL>",
                      token="<API_TOKEN>",
                      validate_certs=false) }}'
         loop_control:
                label: "{{ item.value.device.display }} - {{ item.value.name }}"
         when: inventory_hostname == item.value.label

    - name: Perfrom Firmware update
      block:
      - name: Copy New Version files to Nodegrid
        copy:
           src: '~/artefacts/{{ new_version }}'
           dest: '/var/opt/tftpboot/{{ new_version }}'
        connection: ssh
        delegate_to: "{{ item.value.device.display }}"
        loop: '{{ query("netbox.netbox.nb_lookup",
                      "console-server-ports",
                      api_filter="label=<inventory_hostname>",
                      api_endpoint="https://<URL>",
                      token="<API_TOKEN>",
                      validate_certs=false) }}'
        loop_control:
                label: "{{ item.value.device.display }} - {{ item.value.name }}"
        when: inventory_hostname == item.value.label

      - name: enable tftp
        copy:
            src: ~/artefacts/_tftpd
            dest: /etc/xinetd.d/tftpd
            owner: root
            group: root
            mode: u=rw,g=r,o=r
        become: true
        connection: ssh
        delegate_to: "{{ item.value.device.display }}"
        loop: '{{ query("netbox.netbox.nb_lookup",
                      "console-server-ports",
                      api_filter="label=<inventory_hostname>",
                      api_endpoint="https://<URL>",
                      token="<API_TOKEN>",
                      validate_certs=false) }}'
        loop_control:
                label: "{{ item.value.device.display }} - {{ item.value.name }}"
        when: inventory_hostname == item.value.label

      - name: start tftp
        shell: /etc/init.d/xinetd restart
        become: true
        connection: ssh
        delegate_to: "{{ item.value.device.display }}"
        loop: '{{ query("netbox.netbox.nb_lookup",
                      "console-server-ports",
                      api_filter="label=<inventory_hostname>",
                      api_endpoint="https://<URL>",
                      token="<API_TOKEN>",
                      validate_certs=false) }}'
        loop_control:
                label: "{{ item.value.device.display }} - {{ item.value.name }}"
        when: inventory_hostname == item.value.label

      - name: firmware update
        zpe.device_connection.run_command:
            target: "{{ item.value.label }}"
            username: "{{ console_username }}"
            password: "{{ console_password }}"
            target_os: "{{ ansible_network_os }}"
            cmds:
              - cmd: 'execute restore image tftp {{ new_version }} 172.16.0.2'
                cmd_prompt: "(y/n)"
              - cmd: y                # Firmware upgarde confirmation
                cmd_timeout: 900
                cmd_new_line: ''
                cmd_prompt: "starting."
                cmd_prompt_match: inline
            send_cmds_close: false
        connection: ssh
        delegate_to: "{{ item.value.device.display }}"
        loop: '{{ query("netbox.netbox.nb_lookup",
                      "console-server-ports",
                      api_filter="label=<inventory_hostname>",
                      api_endpoint="https://<URL>",
                      token="<API_TOKEN>",
                      validate_certs=false) }}'
        loop_control:
            label: "{{ item.value.device.display }} - {{ item.value.name }}"
        when: inventory_hostname == item.value.label

      - name: Sleep for 300 seconds and ensure that unit is fully booted
        ansible.builtin.wait_for:
          timeout: 300
        delegate_to: localhost

      - name: fetch system status and ensure we can still talk to the device through the management interface
        fortios_configuration_fact:
          selector: system_status
        ignore_errors: yes
        register: config_change

      - name: Display current version
        debug:
          var: config_change

      - name: Simulated Update Failure
        ansible.builtin.fail:
           msg: Simulated Update Failure
        ignore_errors: yes
        register: config_change

      - name: Error Handling
        block:
        - name: restore the management interface config, in case communication is not possiable anymore
          run_command:
             target:  "{{ item.value.label }}"
             username: "{{ console_username }}"
             password: "{{ console_password }}"
             target_os: "{{ ansible_network_os }}"
             cmds:
                - "{{lookup('ansible.builtin.file', '~/{{ inventory_hostname }}_interfaces_gold.log') }}"
          delegate_to: "{{ item.value.device.display }}"
          loop: '{{ query("netbox.netbox.nb_lookup",
                      "console-server-ports",
                      api_filter="label=<inventory_hostname>",
                      api_endpoint="https://<URL>",
                      token="<API_TOKEN>",
                      validate_certs=false) }}'
          loop_control:
            label: "{{ item.value.device.display }} - {{ item.value.name }}"
          when: inventory_hostname == item.value.label and config_change.failed
          connection: ssh

        - name: Power Cycle the unit
          zpe.system.nodegrid_cmds:
            cmds:
              - cmd: 'cd /access/{{ inventory_hostname }}'
              - cmd: 'outlet_cycle'
          delegate_to: "{{ item.value.device.display }}"
          loop: '{{ query("netbox.netbox.nb_lookup",
                      "console-server-ports",
                      api_filter="label=<inventory_hostname>",
                      api_endpoint="https://<URL>",
                      token="<API_TOKEN>",
                      validate_certs=false) }}'
          loop_control:
            label: "{{ item.value.device.display }} - {{ item.value.name }}"
          when: inventory_hostname == item.value.label and config_change.failed
          connection: ssh

        - name: Sleep for 180 seconds and ensure that unit is fully booted
          ansible.builtin.wait_for:
            timeout: 180
          delegate_to: localhost
          when: config_change.failed

        - name: fetch system status and ensure we can still talk to the device through the management interface
          fortios_configuration_fact:
            selector: system_status
          ignore_errors: yes
          register: config_change
          when: config_change.failed

        - name: Display current version
          debug:
            var: config_change